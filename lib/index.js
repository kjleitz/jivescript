!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("JiveScript",[],t):"object"==typeof exports?exports.JiveScript=t():e.JiveScript=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);const n={},i=(e,t)=>{const{cacheRegexes:r,debug:i}=t;if(r&&n[e])return i&&console.log(`Regex: ${n[e]} (from cache)`),n[e];const o=e.toLowerCase().replace(/ +/g," ").replace(/[^a-z0-9*\[\]\(\)| ]/g,"").replace(/ \[\*\]/g,"( .+?)?").replace(/\[\*\] /g,"(.+? )?").replace(/\*/g,"(.+?)").replace(/ \[([^\]]*)\]/g,"( $1)?").replace(/\[([^\]]*)\] /g,"($1 )?").trim(),s=new RegExp(`^${o}$`);return r&&(n[e]=s),i&&console.log(`Regex: ${s}`),s},o=(e,t)=>{const r=e.match(/\*|\([^)]*\)|\[[^\]]*\]/g);return r?t.slice(1).reduce((e,t,n)=>{const i=r[n],o=e[i]||[];return Object.assign(e,{[i]:[...o,t&&t.trim()]})},{}):{}},s=(e,t,r)=>{const{debug:n}=r,s=(e=>e.toLowerCase().replace(/[^a-z0-9 ]/gi,""))(e);n&&console.log(`Checking "${s}" against triggers...`);for(const e of t){const{patterns:t}=e;for(let g=0;g<t.length;g++){const c=t[g];n&&console.log(`Trigger pattern #${g+1}: "${c}"`);const a=s.match(i(c,r));if(a)return n&&console.log("Found a match!"),{trigger:e,interpreted:s,pattern:c,patternIndex:g,replacements:o(c,a)}}}return null};t.default=class{constructor({cacheRegexes:e=!0,debug:t=!1}={}){this.log=this.debug.bind(this,"log"),this.warn=this.debug.bind(this,"warn"),this.error=this.debug.bind(this,"error"),this.options={cacheRegexes:e,debug:t},this.currentResponse=null,this.lastResponse=null,this.triggerTier={current:[],parent:null}}debug(e,t){this.options.debug&&console[e](t)}get triggers(){return this.triggerTier.current}matchTrigger(e){this.log(`Matching "${e}" against the current tier of trigger patterns: "${this.triggers.flatMap(({patterns:e})=>e).join('", "')}"`);const t=s(e,this.triggers,this.options);return t||!this.triggerTier.parent?t:(this.warn("No match found in the current tier of trigger patterns. Falling back to a lower tier of triggers."),this.triggerTier={current:this.triggerTier.parent.current,parent:this.triggerTier.parent.parent},this.matchTrigger(e))}tell(e){return new Promise((t,r)=>{const n=this.matchTrigger(e);if(n){this.log(`Matching trigger info:\n  ${JSON.stringify(n,null,"  ").split("\n").join("  \n")}`);const r=Object.assign({text:e},n),i=n.trigger.callback(r);(i&&i.then?i:new Promise(e=>e())).then(()=>{if("string"==typeof this.currentResponse){const e=this.currentResponse;this.currentResponse=null,this.log(`Responding with: "${e}"`),t(e)}else this.error("Error: No response to matched trigger! Make sure you:\n  - call say() within the callback passed to hear(), if synchronous\n  - return a Promise (or any thenable) in the callback (which calls say() when resolved) if you're performing something async"),t("Error: no response to matched trigger!")})}else this.error("Error: No matching trigger found!"),t("Error: No matching trigger found!")})}hear(e,t){const r="string"==typeof e?[e]:e;this.log(`Registering the following patterns to use for the next message:\n  - "${r.join('\n  - "')}"`),this.triggers.push({patterns:r,callback:t})}say(e,t){this.log(`Using this response: "${e}"`),this.currentResponse=e,this.triggerTier={current:[],parent:this.triggerTier},t&&t()}}}]).default});